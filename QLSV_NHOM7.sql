
--ALTER DATABASE QUANLYSINHVIEN SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
CREATE DATABASE QUANLYSINHVIEN;
GO

USE QUANLYSINHVIEN;
GO

ALTER DATABASE QUANLYSINHVIEN
SET COMPATIBILITY_LEVEL = 120;
GO


CREATE TABLE NHANVIEN (
    MANV VARCHAR(20) PRIMARY KEY,
    HOTEN NVARCHAR(100) NOT NULL,
    EMAIL VARCHAR(20),
    LUONG VARBINARY(MAX),
    TENDN NVARCHAR(100) NOT NULL,
    MATKHAU VARBINARY(MAX) NOT NULL,
    PUBKEY VARCHAR(20)
);
GO

CREATE TABLE LOP (
    MALOP VARCHAR(20) PRIMARY KEY,
    TENLOP NVARCHAR(100) NOT NULL,
    MANV VARCHAR(20),
    CONSTRAINT FK_NV_LOP FOREIGN KEY (MANV) REFERENCES NHANVIEN(MANV)
);
GO

CREATE TABLE SINHVIEN (
    MASV NVARCHAR(20) PRIMARY KEY,
    HOTEN NVARCHAR(100) NOT NULL,
    NGAYSINH DATETIME,
    DIACHI NVARCHAR(200),
    MALOP VARCHAR(20),
    TENDN NVARCHAR(100) NOT NULL,
    MATKHAU VARBINARY(MAX) NOT NULL
	CONSTRAINT FK_SV_LOP FOREIGN KEY (MALOP) REFERENCES  LOP(MALOP)
);
GO

CREATE TABLE HOCPHAN (
    MAHP VARCHAR(20) PRIMARY KEY,
    TENHP NVARCHAR(100) NOT NULL,
    SOTC INT
);
GO

INSERT INTO HOCPHAN VALUES( 'HP01',N'Cơ Sở Dữ Liệu',3);
GO
INSERT INTO HOCPHAN VALUES( 'HP02',N'Thực hành Cơ Sở Dữ Liệu',3);
GO

CREATE TABLE BANGDIEM (
    MASV NVARCHAR(20),
    MAHP VARCHAR(20),
    DIEMTHI VARBINARY(MAX),
    CONSTRAINT PK_BD PRIMARY KEY (MASV, MAHP), 
    CONSTRAINT FK_BD_SV FOREIGN KEY (MASV) REFERENCES SINHVIEN(MASV), 
    CONSTRAINT FK_BD_HP FOREIGN KEY (MAHP) REFERENCES HOCPHAN(MAHP) 
);
GO

CREATE PROCEDURE SP_INS_PUBLIC_NHANVIEN
    @MANV VARCHAR(20),
    @HOTEN NVARCHAR(100),
    @EMAIL VARCHAR(20),
    @LUONGCB VARCHAR(MAX),
    @TENDN NVARCHAR(100),
    @MATKHAU NVARCHAR(50)
AS
BEGIN
    DECLARE @HashedPassword VARBINARY(MAX);
    SET @HashedPassword = HASHBYTES('SHA1', @MATKHAU);

    DECLARE @c NVARCHAR(MAX);
    DECLARE @c1 NVARCHAR(MAX);
    DECLARE @c2 NVARCHAR(MAX);

    IF Asymkey_Id(@MANV) IS NULL
    BEGIN
        SET @c = 'CREATE ASYMMETRIC KEY ' + QUOTENAME(@MANV) + ' WITH ALGORITHM = RSA_512 ENCRYPTION BY PASSWORD = ''' + @MATKHAU + '''';
        EXEC sp_executesql @c;
    END
    ELSE
    BEGIN
        -- Xóa và tạo lại khóa bất đối xứng nếu đã tồn tại
        SET @c1 = 'DROP ASYMMETRIC KEY ' + QUOTENAME(@MANV);
        EXEC sp_executesql @c1;
        SET @c2 = 'CREATE ASYMMETRIC KEY ' + QUOTENAME(@MANV) + ' WITH ALGORITHM = RSA_512 ENCRYPTION BY PASSWORD = ''' + @MATKHAU + '''';
        EXEC sp_executesql @c2;
    END

    DECLARE @EnSalary VARBINARY(MAX);
    SET @EnSalary = ENCRYPTBYASYMKEY(ASYMKEY_ID(@MANV), CONVERT(VARBINARY(MAX), @LUONGCB));

    INSERT INTO NHANVIEN (MANV, HOTEN, EMAIL, LUONG, TENDN, MATKHAU, PUBKEY)
    VALUES (@MANV, @HOTEN, @EMAIL, @EnSalary, @TENDN, @HashedPassword, @MANV);
END;
GO

EXEC SP_INS_PUBLIC_NHANVIEN 'NV01', 'NGUYEN VAN A', 'NVA@', '3000000', 'NVA', 'abcd12';
EXEC SP_INS_PUBLIC_NHANVIEN 'NV02', 'NGUYEN VAN B', 'NVB@', '5000000', 'NVB', '12abcd';
GO

CREATE PROCEDURE SP_SEL_PUBLIC_NHANVIEN
    @TENDN NVARCHAR(100),
    @MK NVARCHAR(50)
AS
BEGIN
    DECLARE @MANV VARCHAR(20);
    DECLARE @HOTEN NVARCHAR(100);
    DECLARE @EMAIL VARCHAR(20);
    DECLARE @LUONG VARBINARY(MAX);
    DECLARE @LUONGCB VARCHAR(20); 

    SELECT @MANV = MANV, 
           @HOTEN = HOTEN, 
           @EMAIL = EMAIL, 
           @LUONG = LUONG
    FROM NHANVIEN
    WHERE TENDN = @TENDN AND MATKHAU = HASHBYTES('SHA1', @MK); 
 
    IF @MANV IS NULL
    BEGIN
        RAISERROR('Không tìm thấy nhân viên hoặc mật khẩu không đúng!', 16, 1);
        RETURN ;
    END

    SET @LUONGCB = CONVERT(VARCHAR(20), DECRYPTBYASYMKEY(ASYMKEY_ID(@MANV), @LUONG, @MK)); 

    SELECT @MANV AS MANV, 
           @HOTEN AS HOTEN, 
           @EMAIL AS EMAIL, 
           @LUONGCB AS LUONGCB;
END;
GO

EXEC SP_SEL_PUBLIC_NHANVIEN 'NVA', 'abcd12';
GO
EXEC SP_SEL_PUBLIC_NHANVIEN 'NVB', '12abcd';
GO

INSERT INTO NHANVIEN (MANV, HOTEN, EMAIL, LUONG, TENDN, MATKHAU, PUBKEY)
VALUES 
    ('NV01', 'NGUYEN VAN A', 'nva@yahoo.com', CONVERT(VARBINARY(MAX), '3000000'), 'NVA', '123456', 'NV01'),
    ('NV02', 'NGUYEN VAN B', 'nvb@yahoo.com', CONVERT(VARBINARY(MAX), '2000000'), 'NVB', '1234567', 'NV02');
GO

SELECT * FROM NHANVIEN;
SELECT * FROM LOP;
SELECT * FROM SINHVIEN;


/* Procedure Đăng Nhập */
CREATE PROCEDURE SP_LOGIN_NV
(
	@TENDN NVARCHAR(100),
    @MK NVARCHAR(100)
)
AS
BEGIN
	DECLARE @HashedPassword VARBINARY(MAX);
    SET @HashedPassword = HASHBYTES('SHA1', @MK);
	
	DECLARE @FIND_USER INT;
	SELECT @FIND_USER = COUNT(*)
	FROM NHANVIEN
	WHERE TENDN = @TENDN AND MATKHAU = @HashedPassword;
	
	IF @FIND_USER = 1
	BEGIN
			PRINT 'Thành Công!';
			RETURN 0;
	END 
	ELSE 
	BEGIN
			PRINT 'Sai Tên DN hoặc MK!';
			RETURN 1;
	END
END;
GO

EXEC SP_LOGIN_NV 'NVA', 'abcd12';
GO

-- Procedure Quản Lý Lớp
CREATE PROCEDURE SP_INSERT_LOP
    @MALOP VARCHAR(20),
    @TENLOP NVARCHAR(100),
    @MANV VARCHAR(20) = NULL
AS
BEGIN
    INSERT INTO LOP (MALOP, TENLOP, MANV)
    VALUES (@MALOP, @TENLOP, @MANV);
END;
GO

EXEC SP_INSERT_LOP  'LH01',  'CNTT-01',  'NV01';
GO
EXEC SP_INSERT_LOP  'LH02',  'CNTT-02',  'NV02';
GO

CREATE PROCEDURE SP_UPDATE_LOP
    @MALOP VARCHAR(20),
    @TENLOP NVARCHAR(100),
    @MANV VARCHAR(20) = NULL
AS
BEGIN
    UPDATE LOP
    SET TENLOP = @TENLOP,
        MANV = @MANV
    WHERE MALOP = @MALOP;
END;
GO

--EXEC SP_UPDATE_LOP  'LH01',  'CNTT-01',  'NV01';
--GO
--EXEC SP_UPDATE_LOP  'LH02',  'CNTT-02',  'NV02';
--GO

CREATE PROCEDURE SP_DELETE_LOP
    @MALOP VARCHAR(20)
AS
BEGIN
    DELETE FROM LOP
    WHERE MALOP = @MALOP;
END;
GO
--EXEC SP_DELETE_LOP  'LH01';
--GO
--==========================
--========================
--Load lớp dựa theo mã nhân viên
CREATE PROCEDURE SP_LocLopTheoTenNV
    @TENDN NVARCHAR(100)
AS
BEGIN
    SELECT L.TENLOP
    FROM LOP L
    JOIN NHANVIEN NV ON L.MANV = NV.MANV
    WHERE NV.TENDN = @TENDN;
END;
GO

EXEC SP_LocLopTheoTenNV 'NVA';
GO

-- ======================================

-- Procedure Quản Lý Sinh Viên
CREATE PROCEDURE SP_INSERT_SINHVIEN
    @MASV NVARCHAR(20),
    @HOTEN NVARCHAR(100),
    @NGAYSINH DATETIME,
    @DIACHI NVARCHAR(200),
    @MALOP VARCHAR(20),
    @TENDN_SV NVARCHAR(100),
    @PASS_SV NVARCHAR(260),
    @TENDN_NV NVARCHAR(100) 
AS
BEGIN 
    DECLARE @MANV VARCHAR(20);

    SELECT @MANV = MANV 
    FROM NHANVIEN 
    WHERE TENDN = @TENDN_NV;

    IF @MANV IS NULL
    BEGIN
        RAISERROR('Tên đăng nhập không hợp lệ!', 16, 1);
        RETURN;
    END

    IF NOT EXISTS (SELECT 1 FROM LOP L JOIN NHANVIEN NV ON L.MANV = NV.MANV WHERE NV.TENDN =@TENDN_NV AND MALOP=@MALOP)
    BEGIN
        RAISERROR('Bạn không có quyền thêm sinh viên vào lớp mà bạn không quản lí !', 16, 1);
        RETURN;
    END
    DECLARE @HashedPassword VARBINARY(MAX);
    SET @HashedPassword = HASHBYTES('SHA1', @PASS_SV);

    INSERT INTO SINHVIEN (MASV, HOTEN, NGAYSINH, DIACHI, MALOP, TENDN, MATKHAU)
    VALUES (@MASV, @HOTEN, @NGAYSINH, @DIACHI, @MALOP, @TENDN_SV, @HashedPassword);
END;
GO
EXEC SP_INSERT_SINHVIEN 'SV001',  'Nguyen Van A', '01-01-2004', N'123 Đường ABC',  'LH01', 'SV001', 'password123','NVA';
GO
EXEC SP_INSERT_SINHVIEN 'SV002',  'Nguyen Van B', '02-02-2004', N'123 Đường ABC',  'LH02', 'SV002', 'password1234','NVB';
GO

CREATE PROCEDURE SP_UPDATE_SINHVIEN
    @MASV NVARCHAR(20),
    @HOTEN NVARCHAR(100),
    @NGAYSINH DATETIME,
    @DIACHI NVARCHAR(200),
    @MALOP VARCHAR(20),
    @TENDN_SV NVARCHAR(100),
    @PASS_SV NVARCHAR(260),
    @TENDN_NV NVARCHAR(100) 
AS
BEGIN 
    DECLARE @MANV VARCHAR(20);
    SELECT @MANV = MANV 
    FROM NHANVIEN 
    WHERE TENDN = @TENDN_NV;
    IF @MANV IS NULL
    BEGIN
        RAISERROR('Tên đăng nhập không hợp lệ!', 16, 1);
        RETURN;
    END
	IF NOT EXISTS (SELECT 1 FROM LOP L JOIN NHANVIEN NV ON L.MANV = NV.MANV WHERE NV.TENDN =@TENDN_NV)
    BEGIN
        RAISERROR('Bạn không có quyền thêm sinh viên vào lớp này!', 16, 1);
        RETURN;
    END
    DECLARE @HashedPassword VARBINARY(MAX);
    SET @HashedPassword = HASHBYTES('SHA1', @PASS_SV);
    UPDATE SINHVIEN
    SET HOTEN = @HOTEN,
        NGAYSINH = @NGAYSINH,
        DIACHI = @DIACHI,
        MALOP = @MALOP,
        TENDN = @TENDN_SV,
        MATKHAU = @HashedPassword
    WHERE MASV = @MASV;
END;
GO
EXEC SP_UPDATE_SINHVIEN 'SV001',  'Nguyen Van C', '01-01-2004', N'123 Đường ABCD',  'LH01', 'SV001', 'password123','NVA';
--GO

CREATE PROCEDURE SP_DELETE_SINHVIEN
    @MASV NVARCHAR(20),
    @MALOP NVARCHAR(20),
    @TENDN_NV NVARCHAR(100)
AS
BEGIN
    DECLARE @MANV VARCHAR(20);

    SELECT @MANV = MANV 
    FROM NHANVIEN 
    WHERE TENDN = @TENDN_NV;

    IF @MANV IS NULL
    BEGIN
        RAISERROR('Tên đăng nhập không hợp lệ!', 16, 1);
        RETURN;
    END

    IF NOT EXISTS (SELECT 1 FROM LOP L JOIN NHANVIEN NV ON L.MANV = NV.MANV WHERE NV.TENDN =@TENDN_NV)
    BEGIN
        RAISERROR('Bạn không có quyền thêm sinh viên vào lớp này!', 16, 1);
        RETURN;
    END

    DELETE FROM SINHVIEN WHERE MASV = @MASV;
END;
GO
EXEC SP_DELETE_SINHVIEN 'SV001','LH01','NVA';
DELETE FROM BANGDIEM
--GO

--===================
--LOAD SV THEO MÃ NV
CREATE PROCEDURE SP_LOAD_SV
	@TENDN VARCHAR(50)
AS
BEGIN
	SELECT SV.MALOP,SV.MASV,SV.HOTEN,SV.DIACHI,SV.NGAYSINH,SV.TENDN,SV.MATKHAU
    FROM SINHVIEN SV
    INNER JOIN LOP L ON SV.MALOP = L.MALOP
    JOIN NHANVIEN NV ON L.MANV = NV.MANV
    WHERE NV.TENDN = @TENDN;
END;
GO
EXEC SP_LOAD_SV 'NVA'
GO
EXEC SP_LOAD_SV 'NVB'
GO
-- ==============================================

-- Procedure Nhập Điểm 
CREATE PROCEDURE SP_INS_PUBLIC_DIEM
    @MASV VARCHAR(20),
    @MAHP VARCHAR(20),
    @DIEMTHI VARCHAR(MAX),
    @TENDN NVARCHAR(100),
    @MATKHAU NVARCHAR(50)
AS
BEGIN
    DECLARE @MANV VARCHAR(20);
    SELECT @MANV = MANV FROM NHANVIEN WHERE TENDN = @TENDN;

    IF @MANV IS NULL
    BEGIN
        RAISERROR('Không tìm thấy nhân viên!', 16, 1);
        RETURN;
    END

    DECLARE @EnDIEM VARBINARY(MAX);
    SET @EnDIEM = ENCRYPTBYASYMKEY(ASYMKEY_ID(@MANV), CONVERT(VARBINARY(MAX), @DIEMTHI));

    INSERT INTO BANGDIEM(MASV, MAHP, DIEMTHI)
    VALUES (@MASV, @MAHP, @EnDIEM);
END;
GO
EXEC SP_INS_PUBLIC_DIEM 'SV001', 'HP01', 10,'NVA','abcd12';
GO
EXEC SP_INS_PUBLIC_DIEM 'SV002', 'HP01', 8.5,'NVB','abcd12';
GO
EXEC SP_INS_PUBLIC_DIEM 'SV003', 'HP02', 8,'NVB','abcd12';
GO


CREATE PROCEDURE SP_UPDATE_BANGDIEM
    @MASV VARCHAR(20),
    @MAHP VARCHAR(20),
    @DIEMTHI VARCHAR(MAX),
    @TENDN NVARCHAR(100),
    @MATKHAU NVARCHAR(50)
AS
BEGIN
    DECLARE @MANV VARCHAR(20);
    SELECT @MANV = MANV FROM NHANVIEN WHERE TENDN = @TENDN;

    IF @MANV IS NULL
    BEGIN
        RAISERROR('Không tìm thấy nhân viên!', 16, 1);
        RETURN;
    END

    DECLARE @EnDIEM VARBINARY(MAX);
    SET @EnDIEM = ENCRYPTBYASYMKEY(ASYMKEY_ID(@MANV), CONVERT(VARBINARY(MAX), @DIEMTHI));

    UPDATE BANGDIEM
    SET DIEMTHI = @EnDIEM
    WHERE MASV = @MASV AND MAHP = @MAHP;

    IF @@ROWCOUNT = 0
    BEGIN
        RAISERROR('Không tìm thấy bản ghi để cập nhật!', 16, 1);
    END
END;
GO
EXEC SP_UPDATE_BANGDIEM 'SV002', 'HP01', 4,'NVB','abcd12';
GO
-- Procedure Giải mã điểm thi
CREATE PROCEDURE SP_SEL_PUBLIC_DIEM
    @TENDN NVARCHAR(100),
    @MK NVARCHAR(50)
AS
BEGIN
    DECLARE @MANV VARCHAR(20);

    SELECT @MANV = MANV
    FROM NHANVIEN
    WHERE TENDN = @TENDN AND MATKHAU = HASHBYTES('SHA1', @MK);

    IF @MANV IS NULL
    BEGIN
        RAISERROR('Không tìm thấy nhân viên hoặc mật khẩu không đúng!', 16, 1);
        RETURN;
    END
	-- jOIN bảng sv, với điểm, lớp vs sinh viên => kiếm mã nv 
    SELECT BD.MASV, BD.MAHP,
    CONVERT(VARCHAR(20), DECRYPTBYASYMKEY(ASYMKEY_ID(@MANV), BD.DIEMTHI, @MK)) AS DIEM
    FROM BANGDIEM BD
    INNER JOIN SINHVIEN SV ON BD.MASV = SV.MASV
    INNER JOIN LOP L ON SV.MALOP = L.MALOP
    WHERE L.MANV = @MANV;
END;
	
GO
EXEC SP_SEL_PUBLIC_DIEM  'NVA','abcd12'
GO
EXEC SP_SEL_PUBLIC_DIEM  'NVB','12abcd'
GO
SELECT * FROM NHANVIEN;
SELECT * FROM LOP;
SELECT * FROM SINHVIEN;
SELECT * FROM BANGDIEM;
SELECT * FROM HOCPHAN;
GO
